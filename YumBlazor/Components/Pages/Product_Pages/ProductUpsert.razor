@page "/product/create"
@page "/product/update/{id:int}"

@inject IProductRepository _productRepository
@inject NavigationManager _navigation
@inject IJSRuntime _IJSRuntime
@inject ICategoryRepository _categoryRepository
@inject IWebHostEnvironment _webHostEnvironment

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="Loading=" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id > 0 ? "Update a " : "Add a New ")Product</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <EditForm Model="Product" FormName="ProductUpsertForm" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />

                <div class="border p-3 mt-4">
                    <div class="form-floating py-4 col-12">
                        <InputText @bind-Value="Product.Name" class="form-control" id="Name" placeholder="Name" />
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(() => Product.Name)" />
                    </div>
                    <div class="form-floating py-4 col-12">
                        <InputText @bind-Value="Product.Description" class="form-control" id="Description" placeholder="Description" />
                        <label for="Name">Description</label>
                        <ValidationMessage For="@(() => Product.Description)" />
                    </div>
                    <div class="form-floating py-4 col-12">
                        <InputText @bind-Value="Product.SpecialTag" class="form-control" id="SpecialTag" placeholder="SpecialTag" />
                        <label for="Name">Special Tag</label>
                        <ValidationMessage For="@(() => Product.SpecialTag)" />
                    </div>
                    <div class="form-floating py-4 col-12">
                        <InputNumber @bind-Value="Product.Price" class="form-control" id="Price" placeholder="Price" />
                        <label for="Name">Price</label>
                        <ValidationMessage For="@(() => Product.Price)" />
                    </div>
                    <div class="form-floating py-4 col-12">
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select" id="Category" placeholder="Category">
                            <option value="0" disabled selected>-- Select a category --</option>
                            @foreach (var cat in Categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-floating py-4 col-12">
                        @if (Product.ImageUrl == null)
                        {
                            <InputFile OnChange="LoadFiles" class="form-control pb-3" id="customFile" accept="image/x-png,image/jpeg">

                            </InputFile>
                            <label for="customFile">Upload Image</label>
                        }
                        <div class="row">
                            <div class="col-3">
                                <img src="@Product.ImageUrl" alt="..." class="img-thumbnail" />
                            </div>
                            <div class="col-md-9">
                                <i class="bi bi-trash btn btn-outline-danger" @onclick="DeleteImage"> Remove</i>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-floppy2-fill"></i>@(Id == 0 ? "Create " : "Update ") Product
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="product" class="btn btn-secondary form-control" disabled="@IsProcessing">
                                <i class="bi bi-arrow-bar-left"></i> Back to List
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private bool IsProcessing { get; set; } = true;
    public bool _isImageLoading { get; set; }
    public string? _directoryPath { get; set; }

    [SupplyParameterFromForm]
    public Product Product { get; set; } = new Product();

    public IEnumerable<Category> Categories { get; set; } = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        _directoryPath = Path.Combine(_webHostEnvironment.WebRootPath, "images", "product");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductAndCategoryList();

            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProductAndCategoryList()
    {
        if (Id > 0)
            Product = await _productRepository.GetAsync(Id);

        Categories = await _categoryRepository.GetAllAsync();
    }

    private async Task UpsertProduct()
    {
        IsProcessing = true;

        if (Id == 0)
        {
            await _productRepository.CreateAsync(Product);
            await _IJSRuntime.ToastrSuccess("Created successfully.");

        }
        else
        {
            await _productRepository.UpdateAsync(Product);
            await _IJSRuntime.ToastrSuccess("Updated successfully");
        }

        IsProcessing = false;


        _navigation.NavigateTo("product");
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsProcessing = true;

        var file = e.File;

        FileInfo fileInfo = new FileInfo(file.Name);
        var newFileName = $"{Guid.NewGuid()}.{fileInfo.Extension}";


        if (!Directory.Exists(_directoryPath))
        {
            Directory.CreateDirectory(_directoryPath!);

        }

        var path = Path.Combine(_directoryPath!, newFileName);
        await using FileStream fileStream = new(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);

        Product.ImageUrl = $"/images/product/{newFileName}";
        IsProcessing = false;


    }
    private void DeleteImage(MouseEventArgs args)
    {
        if (Product.ImageUrl == null)
            return;
        var fileTodelete = Product.ImageUrl.Split('/').Reverse().First();

        var filePathTodelete = Path.Combine(_directoryPath, fileTodelete);

        if (!File.Exists(filePathTodelete))
        {
            Product.ImageUrl = null;
            return;
            
        }

        File.Delete(filePathTodelete);

        Product.ImageUrl = null;

        return;
    }
}
